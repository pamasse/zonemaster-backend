os:
  - linux

sudo: required
services: 
  - docker

jobs:
  include:
  - env: 
      - DISTRIBUTION=ubuntu
      - DISTRIBUTION_VERSION=18.04
      - DB=postgres
      - DB_VERSION=10
      - PERL_VERSION=5.30.0
      - ZONEMASTER_BACKEND_CONFIG_FILE=./share/travis_postgresql_backend_config.ini
      - DOCKERFILE=Dockerfile.debian.dev
      - PERL5LIB=/usr/share/perl5 
      - ZONEMASTER_RECORD=0
  - env: 
      - DISTRIBUTION=ubuntu
      - DISTRIBUTION_VERSION=16.04
      - DB=postgres
      - DOCKERFILE=Dockerfile.debian.dev
      - DB_VERSION=10
      - PERL_VERSION=5.30.0
      - ZONEMASTER_BACKEND_CONFIG_FILE=./share/travis_postgresql_backend_config.ini
      - PERL5LIB=/usr/share/perl5 
      - ZONEMASTER_RECORD=0
      
before_script: #Here, we build all testing environments
    #Build image
    - docker build -t backend_dev.$DISTRIBUTION.$DB.$PERL_VERSION -f $DOCKERFILE --build-arg ZONEMASTER_BACKEND_CONFIG_FILE=$ZONEMASTER_BACKEND_CONFIG_FILE --build-arg IMAGE_NAME=$DISTRIBUTION:$DISTRIBUTION_VERSION --build-arg PERL_VERSION=$PERL_VERSION --build-arg DB=$DB --build-arg DB_VERSION=$DB_VERSION .
    #Display images
    - docker images -a

script: #Here, we run tests on the container already build
    - if [[ "$DB" == "SQLite" ]]; then docker run backend_dev.$DISTRIBUTION.$DB.$PERL_VERSION /bin/sh -c "service postgresql start && cd app && perl Makefile.PL && make test"; fi
    - if [[ "$DB" == "postgres" ]]; then docker run backend_dev.$DISTRIBUTION.$DB.$PERL_VERSION /bin/sh -c "service postgresql start && pwd && perl -I./lib ./t/test_DB_backend.pl PostgreSQL"; fi
    - if [[ "$DB" == "MySQL" ]]; then docker run backend_dev.$DISTRIBUTION.$DB.$PERL_VERSION /bin/sh -c "perl -I./lib ./t/test_DB_backend.pl MySQL"; fi
    

    

#   - if [ "$TRAVIS_BRANCH" = "develop" ]; then ./ci/deploy.rb envdev.tld; fi
#   - if [ "$TRAVIS_BRANCH" = "master" ]; then ./ci/deploy.rb envprod.tld; fi